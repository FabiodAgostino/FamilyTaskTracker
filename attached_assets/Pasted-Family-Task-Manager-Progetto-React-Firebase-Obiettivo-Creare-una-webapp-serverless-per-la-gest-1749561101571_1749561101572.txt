Family Task Manager - Progetto React + Firebase
Obiettivo
Creare una webapp serverless per la gestione delle attività quotidiane e familiari con React frontend e Firebase/Firestore backend.
Specifiche Tecniche
Stack Tecnologico

Frontend: React 18+ con TypeScript
Backend: Firebase (Firestore, Authentication)
Styling: CSS Modules o Styled Components
State Management: React Context API o Redux Toolkit
Build Tool: Vite
Deploy: GithubPages

Palette Colori

Primario: #F4F1DE (Eggshell - sfondo principale)
Secondario: #E07A5F (Burnt Sienna - accenti)
Terziario: #3D405B (Delft Blue - testi principali)
Quaternario: #81B29A (Cambridge Blue - elementi interattivi)
Quinto: #F2CC8F (Sunset - highlights e notifiche)

Struttura dell'Applicazione
1. Sistema di Autenticazione

Login semplice senza registrazione
Credenziali pre-caricate in Firestore:
users: [
  { username: "admin", password: "admin123", role: "admin" },
  { username: "user1", password: "pass123", role: "user" },
  { username: "user2", password: "pass456", role: "user" }
]

Sessione persistente con localStorage
Redirect automatico se già loggato

2. Modulo Shopping List
Funzionalità:

Inserimento articoli con campi:

Nome prodotto (required)
Link URL (optional)
Categoria (combobox editabile)


Gestione dinamica categorie:

Dropdown con categorie esistenti
Input per aggiungere nuova categoria al volo
Salvataggio automatico nuove categorie in Firestore


Visibilità: Solo creatore + admin
CRUD completo (Create, Read, Update, Delete)
Filtri per categoria
Ricerca per nome

Struttura Dati Firestore:
javascript// Collection: shopping_items
{
  id: "auto_generated",
  name: "Nome Prodotto",
  link: "https://...",
  category: "Elettronica",
  createdBy: "username",
  createdAt: timestamp,
  completed: false
}

// Collection: categories
{
  id: "auto_generated",
  name: "Nome Categoria",
  createdBy: "username",
  createdAt: timestamp
}
3. Modulo Note
Funzionalità:

Creazione note con editor rich text semplice
Toggle visibilità: Privata vs Pubblica (tutti gli utenti)
Tagging/categorizzazione note
Ricerca full-text
Ordinamento per data/titolo

Struttura Dati:
javascript// Collection: notes
{
  id: "auto_generated",
  title: "Titolo Nota",
  content: "Contenuto della nota...",
  isPublic: true/false,
  createdBy: "username",
  createdAt: timestamp,
  updatedAt: timestamp,
  tags: ["tag1", "tag2"]
}
4. Modulo Calendario
Funzionalità:

Vista mensile calendario
Aggiunta eventi con form modale
Eventi privati/pubblici (stessa logica note)
Colori diversi per tipo evento
Reminder/notifiche

Struttura Dati:
javascript// Collection: calendar_events
{
  id: "auto_generated",
  title: "Titolo Evento",
  description: "Descrizione...",
  startDate: timestamp,
  endDate: timestamp,
  isPublic: true/false,
  createdBy: "username",
  eventType: "personal|family|work",
  color: "#E07A5F"
}
Design Requirements
Layout

Header: Logo + navigazione principale + info utente
Sidebar: Menu moduli con icone
Main Content: Area principale con contenuto dinamico
Responsive: Mobile-first approach

Componenti UI

Button: Stili consistenti con palette
Modal: Per form e conferme
Card: Per visualizzare elementi lista
Form: Input validati con feedback
Calendar: Griglia calendario custom o libreria (react-calendar)
Dropdown: Per categorie con ricerca

Stati dell'Applicazione

Loading states per operazioni async
Error handling con toast notifications
Empty states per liste vuote
Confirmation dialogs per delete operations

Configurazione Firebase
Firestore Security Rules
javascriptrules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /shopping_items/{document} {
  allow read: if request.auth != null && 
    (resource.data.isPublic == true || 
     resource.data.createdBy == request.auth.token.username ||
     request.auth.token.username == 'admin');
  allow write: if request.auth != null;
}
    
    // Note: pubbliche per tutti, private solo per creatore
    match /notes/{document} {
      allow read: if request.auth != null && 
        (resource.data.isPublic == true || 
         resource.data.createdBy == request.auth.token.username ||
         request.auth.token.username == 'admin');
      allow write: if request.auth != null;
    }
    
    // Eventi calendario: stessa logica note
    match /calendar_events/{document} {
      allow read: if request.auth != null && 
        (resource.data.isPublic == true || 
         resource.data.createdBy == request.auth.token.username ||
         request.auth.token.username == 'admin');
      allow write: if request.auth != null;
    }
  }
}
File Structure Suggerita
src/
├── components/
│   ├── common/
│   │   ├── Header.tsx
│   │   ├── Sidebar.tsx
│   │   ├── Modal.tsx
│   │   └── Button.tsx
│   ├── auth/
│   │   └── LoginForm.tsx
│   ├── shopping/
│   │   ├── ShoppingList.tsx
│   │   ├── ShoppingItem.tsx
│   │   └── AddItemForm.tsx
│   ├── notes/
│   │   ├── NotesList.tsx
│   │   ├── NoteCard.tsx
│   │   └── NoteEditor.tsx
│   └── calendar/
│       ├── Calendar.tsx
│       ├── EventModal.tsx
│       └── EventCard.tsx
├── hooks/
│   ├── useAuth.ts
│   ├── useFirestore.ts
│   └── useLocalStorage.ts
├── services/
│   ├── firebase.ts
│   ├── auth.service.ts
│   └── firestore.service.ts
├── types/
│   └── index.ts
├── styles/
│   ├── globals.css
│   └── variables.css
└── App.tsx
Features Aggiuntive da Implementare

Search globale attraverso tutti i moduli
Dark mode toggle
Export data (PDF/JSON)
Notifications per eventi calendario
Drag & drop per riorganizzare liste
Offline support con service worker

Deployment

Configurazione automatica CI/CD con GitHub Actions
Environment variables per Firebase config
Staging e production environments separati


Note per l'implementazione:

Iniziare con autenticazione e setup Firebase
Implementare un modulo alla volta
Testare security rules in ambiente locale
Utilizzare TypeScript per type safety
Implementare loading states sin dall'inizio